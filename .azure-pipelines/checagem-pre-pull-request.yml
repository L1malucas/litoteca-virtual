trigger:
  branches:
    exclude:
      - '*'

pr:
  branches:
    include:
      - develop
      - hmg
      - main

pool:
  name: Azure Pipelines
  vmImage: 'ubuntu-latest'

variables:
  - template: variables.yml

stages:
  - stage: checagem_branch
    displayName: 'Checagem de Nome da Branch'
    jobs:
    - job: 'checagem_nome_branch'
      displayName: 'Checagem de Nome da Branch'
      steps:
        - script: |
            chmod +x ./.azure-pipelines/scripts/checagem-branch
          displayName: 'Definir permissões de execução para script checagem-branch'

        - script: |
            if [ "$(Build.Reason)" == "PullRequest" ]; then
              BRANCH_NAME=$(echo $(System.PullRequest.SourceBranch) | sed 's|refs/heads/||')
              echo "PR detectado. Usando a branch de origem: $BRANCH_NAME"
              echo "Executando script checagem-branch para a branch: $BRANCH_NAME"
              ./.azure-pipelines/scripts/checagem-branch $BRANCH_NAME
            else
              echo "Nenhum PR detectado. A execução será interrompida."
              exit 1
            fi
          displayName: 'Executar script checagem-branch'

  - stage: checagem_commit
    displayName: 'Checagem das Mensagens de Commits'
    jobs:
    - job: 'checagem_mensagem_commit'
      displayName: 'Checagem das Mensagens de Commits'
      steps:
        - checkout: self
          fetchDepth: 0

        - script: |
            chmod +x ./.azure-pipelines/scripts/checagem-commit
            sed -i 's/\r$//' ./.azure-pipelines/scripts/checagem-commit
          displayName: 'Definir permissões de execução para script checagem-commit'

        - script: |
            echo "Listando commits do PR atual"

            # Define variáveis de branch de origem e destino
            SOURCE_BRANCH=$(Build.SourceBranchName)
            TARGET_BRANCH=develop  # Defina o branch alvo desejado

            # Configura o Git para usar o token de acesso para autenticação
            git config --global url."https://$(System.AccessToken)@$(Build.Repository.Uri)".insteadOf "https://$(Build.Repository.Uri)"

            # Atualiza a branch de destino localmente
            git fetch origin $TARGET_BRANCH

            # Verifica se os commits existem entre a branch do PR e o destino
            COMMITS=$(git log origin/$TARGET_BRANCH..HEAD --pretty=format:"%H")

            # Passa a variável TARGET_BRANCH ao script checagem-commit
            if [ -n "$COMMITS" ]; then
                TARGET_BRANCH=$TARGET_BRANCH ./.azure-pipelines/scripts/checagem-commit
            else
                echo "Nenhum commit encontrado para validar."
                exit 1
            fi
          displayName: 'Executar script checagem-commit'
